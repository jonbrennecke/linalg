var linalg=linalg||{NAME:"Linear Algebra namespace"};linalg.add=function(c,b){return(function(e,d){while(e--){d[e]+=b[e]}return d})(c.length,c.slice())};linalg.angle=function(c,b){return Math.acos(linalg.dot(c,b)/(c.length*b.length))};linalg.cross=function(c,b){return[c[1]*b[2]-c[2]*b[1],c[2]*b[0]-c[0]*b[2],c[0]*b[1]-c[1]*b[0]]};linalg.diag=function(b){return(function(c,d){while(d--){c[d]=fill(b.length,0);c[d][d]=b[d]}return c})([],b.length)};linalg.dist=function(c,b){s=linalg.sub(c,b);return linalg.dot(s,linalg.transpose(s))};linalg.dot=function(c,b){return(function(d,e){while(e--){d+=c[e]*b[e]}return d})(0,c.length)};linalg.fill=function(c,d){a=[];while(c--){a[c]=d}return a};linalg.gramSchmidt=function(c,b){z=[];for(var d=0;d<c.length;d++){z[d]=d?linalg.sub(c[d],(function(e,f){while(e--){f=linalg.add(f,linalg.proj(c[d],z[e]))}return f})(d,[0,0,0])):c[d];if(b){z[d]=linalg.normalize(z[d])}}return z};linalg.norm=function(b){return Math.sqrt((function(c,d){while(d--){c+=b[d]*b[d]}return c})(0,b.length))};linalg.normalize=function(b){var c=linalg.norm(b);return(function(e,d){while(e--){d[e]/=c}return d})(b.length,b.slice())};linalg.projScalar=function(c,b){return linalg.dot(c,linalg.normalize(b))};linalg.proj=function(c,b){return(function(e,d,f){while(e--){d[e]*=f}return d})(c.length,linalg.normalize(b.slice()),linalg.projScalar(c.slice(),b.slice()))};linalg.reshape=function(b){};linalg.shape=function(b){return[b.length,b[1].length]};linalg.subdiv=function(b,c){return(function(e,d){while(e--){d[e]=b.slice(e*c,(e+1)*c)}return d})(Math.floor(b.length/c),[])};linalg.sub=function(c,b){return(function(e,d){while(e--){d[e]-=b[e]}return d})(c.length,c.slice())};linalg.sum=function(b){return(function(c,d){while(d--){c+=b[d]}return c})(0,b.length)};linalg.transpose=function(b){s=linalg.shape(b);l=s[1]*s[0];return(function(c,d){while(d--){c[d!=l-1?(s[0]*d)%(l-1):l-1]=b[Math.floor(d/s[1])][d%s[1]]}return linalg.subdiv(c,2)})(linalg.fill(l,0),l)};
