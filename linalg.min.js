var linalg=linalg||{NAME:"Linear Algebra namespace"};linalg.add=function(e,t){return function(e,n){while(e--){n[e]+=t[e]}return n}(e.length,e.slice())};linalg.angle=function(e,t){return Math.acos(linalg.dot(e,t)/(e.length*t.length))};linalg.cross=function(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]};linalg.diag=function(e){return function(t,n){while(n--){t[n]=fill(e.length,0);t[n][n]=e[n]}return t}([],e.length)};linalg.dist=function(e,t){s=linalg.sub(e,t);return linalg.dot(s,linalg.transpose(s))};linalg.dot=function(e,t){return function(n,r){while(r--){n+=e[r]*t[r]}return n}(0,e.length)};linalg.fill=function(e,t){a=[];while(e--){a[e]=t}return a};linalg.gramSchmidt=function(e,t){z=[];for(var n=0;n<e.length;n++){z[n]=n?linalg.sub(e[n],function(t,r){while(t--){r=linalg.add(r,linalg.proj(e[n],z[t]))}return r}(n,[0,0,0])):e[n];if(t)z[n]=linalg.normalize(z[n])}return z};linalg.norm=function(e){return Math.sqrt(function(t,n){while(n--){t+=e[n]*e[n]}return t}(0,e.length))};linalg.normalize=function(e){var t=linalg.norm(e);return function(e,r){while(e--){r[e]/=t}return r}(e.length,e.slice())};linalg.projScalar=function(e,t){return linalg.dot(e,linalg.normalize(t))};linalg.proj=function(e,t){return function(e,t,n){while(e--){t[e]*=n}return t}(e.length,linalg.normalize(t.slice()),linalg.projScalar(e.slice(),t.slice()))};linalg.reshape=function(e){};linalg.shape=function(e){return[e.length,e[1].length]};linalg.subdiv=function(e,t){return function(n,r){while(n--){r[n]=e.slice(n*t,(n+1)*t)}return r}(Math.floor(e.length/t),[])};linalg.sub=function(e,t){return function(e,n){while(e--){n[e]-=t[e]}return n}(e.length,e.slice())};linalg.sum=function(e){return function(t,n){while(n--){t+=e[n]}return t}(0,e.length)};linalg.transpose=function(e){s=linalg.shape(e);l=s[1]*s[0];return function(t,n){while(n--){t[n!=l-1?s[0]*n%(l-1):l-1]=e[Math.floor(n/s[1])][n%s[1]]}return linalg.subdiv(t,2)}(linalg.fill(l,0),l)}
